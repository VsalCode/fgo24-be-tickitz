basePath: /
definitions:
  dto.ForgotPasswordRequest:
    properties:
      code:
        type: string
      confirmNewPassword:
        type: string
      email:
        type: string
      newPassword:
        minLength: 6
        type: string
    required:
    - code
    - confirmNewPassword
    - email
    - newPassword
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.MovieRequest:
    properties:
      backdrop_path:
        type: string
      casts:
        items:
          type: integer
        type: array
      directors:
        items:
          type: integer
        type: array
      genres:
        items:
          type: integer
        type: array
      overview:
        type: string
      poster_path:
        type: string
      release_date:
        type: string
      runtime:
        minimum: 1
        type: integer
      title:
        type: string
      vote_average:
        maximum: 10
        minimum: 0
        type: integer
    required:
    - casts
    - directors
    - genres
    - runtime
    - title
    - vote_average
    type: object
  dto.RegisterRequest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - confirmPassword
    - email
    - password
    type: object
  dto.UpdatedUser:
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  dto.VerifyEmail:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.Movie:
    properties:
      admin_id:
        type: integer
      backdrop_path:
        type: string
      casts:
        items:
          type: string
        type: array
      created_at:
        type: string
      directors:
        items:
          type: string
        type: array
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      overview:
        type: string
      popularity:
        type: integer
      poster_path:
        type: string
      release_date:
        type: string
      runtime:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      vote_average:
        type: integer
    type: object
  models.Transactions:
    properties:
      amount:
        type: number
      cinema:
        type: string
      customer_email:
        type: string
      customer_fullname:
        type: string
      customer_phone:
        type: string
      location:
        type: string
      movie_id:
        type: integer
      payment_method_id:
        type: integer
      seat:
        items:
          type: string
        type: array
      show_date:
        type: string
      show_time:
        type: string
    type: object
  models.UpdatedMovie:
    properties:
      backdrop_path:
        type: string
      overview:
        type: string
      poster_path:
        type: string
      release_date:
        type: string
      runtime:
        type: integer
      title:
        type: string
      vote_average:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
      phone:
        type: string
      roles:
        type: string
    type: object
  utils.Response:
    properties:
      errors: {}
      message:
        type: string
      pageInfo: {}
      results: {}
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: API for Cinevo app
  version: "1.0"
paths:
  /admin:
    post:
      consumes:
      - application/json
      description: Add a new movie (admin only)
      parameters:
      - description: Movie data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/dto.MovieRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Add a new movie
      tags:
      - Admin
  /admin/{id}:
    delete:
      consumes:
      - application/json
      description: Delete movie by movie id (admin only)
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Update movie by movie id (admin only)
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie data to update
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.UpdatedMovie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - Admin
  /admin/sales-chart:
    get:
      consumes:
      - application/json
      description: Get Sales Chart filtered by cinema and location (admin only)
      parameters:
      - description: filter by 'cinema' or 'location'
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get Sales Chart
      tags:
      - Admin
  /admin/ticket-sales:
    get:
      consumes:
      - application/json
      description: Get total ticket sales filtered by genre and movie name (admin
        only)
      parameters:
      - description: filter by 'movie' or 'genre'
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get Ticket Sales
      tags:
      - Admin
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Get OTP
      parameters:
      - description: Email address to send verification code
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Forgot Password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login User
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  type: string
              type: object
      summary: Login a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.User'
              type: object
      summary: Register a new user
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using verification code
      parameters:
      - description: Forgot password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Reset Password
      tags:
      - Auth
  /movies:
    get:
      description: Retrieve all movies with optional search and pagination
      parameters:
      - description: Search by movie title
        in: query
        name: search
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Filter By Genre
        in: query
        name: genre
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
      summary: Get all movies
      tags:
      - Movies
  /movies/now-showing:
    get:
      description: Retrieve movies that are now showing
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get now showing movies
      tags:
      - Movies
  /movies/upcoming:
    get:
      description: Retrieve upcoming movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get upcoming movies
      tags:
      - Movies
  /transactions:
    get:
      description: Get Ticket Result
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Ticket Result
      tags:
      - Transactions
    post:
      description: add booking movie ticket transactions
      parameters:
      - description: Data Transactions
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/models.Transactions'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Booking Tickets
      tags:
      - Transactions
  /transactions/history:
    get:
      description: Get User Transactions History
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Transactions History
      tags:
      - Transactions
  /user:
    get:
      description: Get the profile information of current logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.User'
              type: object
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Update the profile information of the logged-in user
      parameters:
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatedUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
